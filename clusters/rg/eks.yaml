# yamllint disable rule:line-length
---
apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: ekscluster.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
spec:
  schema:
    apiVersion: v1alpha1
    kind: EksCluster
    spec:
      name: string
      tenant: string
      environment: string
      region: string
      accountId: string
      managementAccountId: string
      k8sVersion: string
      adminRoleName: string
      nodesCount: integer
      fleetSecretManagerSecretNameSuffix: string
      domainName: string
      aws_partition: string | default="aws"
      aws_dns_suffix: string | default="amazonaws.com"
      network:
        vpcID: string
        subnets:
          controlplane:
            subnet1ID: string
            subnet2ID: string
          workers:
            subnet1ID: string
            subnet2ID: string
      gitops:
        addonsRepoBasePath: string
        addonsRepoPath: string
        addonsRepoRevision: string
        addonsRepoSecretKey: string
        addonsRepoUrl: string
        fleetRepoBasePath: string
        fleetRepoPath: string
        fleetRepoRevision: string
        fleetRepoSecretKey: string
        fleetRepoUrl: string
        platformRepoBasePath: string
        platformRepoPath: string
        platformRepoRevision: string
        platformRepoSecretKey: string
        platformRepoUrl: string
        workloadRepoBasePath: string
        workloadRepoPath: string
        workloadRepoRevision: string
        workloadRepoSecretKey: string
        workloadRepoUrl: string
      addons:
        adot_collector_namespace: string | default="adot-collector-kubeprometheus"
        adot_collector_service_account: string | default="adot-collector-kubeprometheus"

        external_dns_namespace: string | default="external-dns"
        external_dns_service_account: string | default="external-dns-sa"
        external_dns_policy: string | default="sync"

        external_secrets_namespace: string | default="external-secrets"
        external_secrets_service_account: string | default="external-secrets-sa"

        aws_load_balancer_controller_namespace: string | default="kube-system"
        aws_load_balancer_controller_service_account: string | default="aws-load-balancer-controller-sa"

        amp_endpoint_url: string | default=""

        karpenter_namespace: string | default="karpenter"
        karpenter_service_account: string | default="karpenter-sa"
        karpenter_sqs_queue_name: string | default=""


  resources:

    ###########################################################
    # EKS Cluster
    ###########################################################
    - id: clusterRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cluster-role"
        spec:
          name: "${schema.spec.name}-cluster-role"
          policies:
            - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "eks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
    - id: nodeRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cluster-node-role"
        spec:
          name: "${schema.spec.name}-cluster-node-role"
          policies:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
    # https://aws-controllers-k8s.github.io/community/reference/eks/v1alpha1/cluster/
    - id: ekscluster
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: Cluster
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}"
          # implicit dependencies with roles
          annotations:
            clusterRoleArn: "${clusterRole.status.ackResourceMetadata.arn}"
            nodeRoleArn: "${nodeRole.status.ackResourceMetadata.arn}"
        spec:
          name: "${schema.spec.name}"
          roleARN: "${clusterRole.status.ackResourceMetadata.arn}"
          # version: "${schema.spec.k8sVersion} a bug needs to be fixed for this to work
          accessConfig:
            authenticationMode: "API_AND_CONFIG_MAP"
          resourcesVPCConfig:
            endpointPrivateAccess: false
            endpointPublicAccess: true
            subnetIDs:
              - ${schema.spec.network.subnets.controlplane.subnet1ID}
              - ${schema.spec.network.subnets.controlplane.subnet2ID}
    - id: nodegroup
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: Nodegroup
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-nodegroup"
          annotations:
            clusterArn: "${ekscluster.status.ackResourceMetadata.arn}"
        spec:
          name: "${schema.spec.name}-nodegroup"
          clusterName: "${schema.spec.name}"
          subnets:
            - ${schema.spec.network.subnets.workers.subnet1ID}
            - ${schema.spec.network.subnets.workers.subnet2ID}
          nodeRole: "${nodeRole.status.ackResourceMetadata.arn}"
          updateConfig:
            maxUnavailable: 1
          scalingConfig:
            minSize: 6      # ${schema.spec.nodesCount} a bug needs to be fixed for this to work
            maxSize: 6      # ${schema.spec.nodesCount} a bug needs to be fixed for this to work
            desiredSize: 6  # ${schema.spec.nodesCount} a bug needs to be fixed for this to work
    - id: podIdentityAddon
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: Addon
        metadata:
          name: eks-pod-identity-agent
          namespace: "${schema.spec.name}"
          annotations:
            clusterArn: "${ekscluster.status.ackResourceMetadata.arn}"
        spec:
          name: eks-pod-identity-agent
          addonVersion: v1.3.4-eksbuild.1
          clusterName: "${schema.spec.name}"

    ###########################################################
    # ArgoCD Integration
    ###########################################################
    - id: argocdRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          name: "${schema.spec.name}-argocd-role"
        spec:
          name: "${schema.spec.name}-argocd-role"
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "arn:aws:iam::${schema.spec.managementAccountId}:role/argocd-hub-role"
                  },
                  "Action": [
                    "sts:TagSession",
                    "sts:AssumeRole"
                  ]
                }
              ]
            }

    - id: argocdSecret
      template:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "${schema.spec.name}"
          namespace: argocd
          labels:
            argocd.argoproj.io/secret-type: cluster
            # Compatible fleet-management
            fleet_member: spoke
            tenant: "${schema.spec.tenant}"
            environment: "${schema.spec.environment}"
            aws_cluster_name: "${schema.spec.name}"
            workloads: "true"
          annotations:
            # GitOps Bridge
            accountId: "${schema.spec.accountId}"
            aws_account_id: "${schema.spec.accountId}"
            region: "${schema.spec.region}"
            aws_region: "${schema.spec.region}"
            aws_central_region: "${schema.spec.region}"   # used in fleet-management gitops
            oidcProvider: "${ekscluster.status.identity.oidc.issuer}"
            aws_cluster_name: "${schema.spec.name}"
            aws_vpc_id: "${schema.spec.network.vpcID}"
            # GitOps Configuration
            addons_repo_basepath: "${schema.spec.gitops.addonsRepoBasePath}"
            addons_repo_path: "${schema.spec.gitops.addonsRepoPath}"
            addons_repo_revision: "${schema.spec.gitops.addonsRepoRevision}"
            addons_repo_secret_key: "${schema.spec.gitops.addonsRepoSecretKey}"
            addons_repo_url: "${schema.spec.gitops.addonsRepoUrl}"
            fleet_repo_basepath: "${schema.spec.gitops.fleetRepoBasePath}"
            fleet_repo_path: "${schema.spec.gitops.fleetRepoPath}"
            fleet_repo_revision: "${schema.spec.gitops.fleetRepoRevision}"
            fleet_repo_secret_key: "${schema.spec.gitops.fleetRepoSecretKey}"
            fleet_repo_url: "${schema.spec.gitops.fleetRepoUrl}"
            platform_repo_basepath: "${schema.spec.gitops.platformRepoBasePath}"
            platform_repo_path: "${schema.spec.gitops.platformRepoPath}"
            platform_repo_revision: "${schema.spec.gitops.platformRepoRevision}"
            platform_repo_secret_key: "${schema.spec.gitops.platformRepoSecretKey}"
            platform_repo_url: "${schema.spec.gitops.platformRepoUrl}"
            workload_repo_basepath: "${schema.spec.gitops.workloadRepoBasePath}"
            workload_repo_path: "${schema.spec.gitops.workloadRepoPath}"
            workload_repo_revision: "${schema.spec.gitops.workloadRepoRevision}"
            workload_repo_secret_key: "${schema.spec.gitops.workloadRepoSecretKey}"
            workload_repo_url: "${schema.spec.gitops.workloadRepoUrl}"
            # Specific for External-DNS
            external_dns_domain_filters: "${schema.spec.domainName}"
            external_dns_namespace: "${schema.spec.addons.external_dns_namespace}"
            external_dns_policy: "${schema.spec.addons.external_dns_policy}"
            external_dns_service_account: "${schema.spec.addons.external_dns_service_account}"

            # Generic
            external_secrets_namespace: "${schema.spec.addons.external_secrets_namespace}"
            external_secrets_service_account: "${schema.spec.addons.external_secrets_service_account}"

            aws_load_balancer_controller_namespace: "${schema.spec.addons.aws_load_balancer_controller_namespace}"
            aws_load_balancer_controller_service_account: "${schema.spec.addons.aws_load_balancer_controller_service_account}"

            adot_collector_namespace: "${schema.spec.addons.adot_collector_namespace}"
            adot_collector_service_account: "${schema.spec.addons.adot_collector_service_account}"
            amp_endpoint_url: "${schema.spec.addons.amp_endpoint_url}"

            fleet_secret_manager_secret_name: "${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}"

            karpenter_namespace: "${schema.spec.addons.karpenter_namespace}"
            karpenter_node_iam_role_name: "${nodeRole.metadata.name}"
            karpenter_service_account: "${schema.spec.addons.karpenter_service_account}"
            karpenter_sqs_queue_name: "${schema.spec.addons.karpenter_sqs_queue_name}"

        type: Opaque
        # TODO bug in KRO, it always see some drifts..
        # stringData:
        #   name: "${schema.spec.name}"
        #   server: "${ekscluster.status.endpoint}"
        #   config: |
        #     {
        #       "awsAuthConfig": {
        #         "clusterName": "${schema.spec.name}",
        #         "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
        #       },
        #       "tlsClientConfig": {
        #         "caData": "${ekscluster.status.certificateAuthority.data}",
        #         "insecure": false
        #       }
        #     }

    - id: argocdSecretForACK
      template:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "${schema.spec.name}-for-ack"
          namespace: "${schema.spec.name}"

        type: Opaque
        # TODO bug in KRO, it always see some drifts.. need to comment stringData section once it has been created
        # stringData:
        #   name: "${schema.spec.name}"
        #   server: "${ekscluster.status.endpoint}"
        #   # use k8sVersion need to fix bug, use 1.30 for now
        #   config: |
        #     {
        #       "addons": {
        #         "aws_cluster_name": "${schema.spec.name}",
        #         "kubernetes_version": "1.30"
        #       },
        #       "config": {
        #         "awsAuthConfig": {
        #           "clusterName": "${schema.spec.name}",
        #           "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
        #         },
        #         "tlsClientConfig": {
        #           "caData": "${ekscluster.status.certificateAuthority.data}",
        #           "insecure": false
        #         }
        #       },
        #       "metadata": {
        #         "accountId": "${schema.spec.accountId}",
        #         "aws_account_id": "${schema.spec.accountId}",
        #         "region": "${schema.spec.region}",
        #         "aws_region": "${schema.spec.region}",
        #         "aws_central_region": "${schema.spec.region}",
        #         "oidcProvider": "${ekscluster.status.identity.oidc.issuer}",
        #         "aws_cluster_name": "${schema.spec.name}",
        #         "aws_vpc_id": "${schema.spec.network.vpcID}",
        #         "addons_repo_basepath": "",
        #         "addons_repo_path": "${schema.spec.gitops.addonsRepoPath}",
        #         "addons_repo_revision": "${schema.spec.gitops.addonsRepoRevision}",
        #         "addons_repo_secret_key": "${schema.spec.gitops.addonsRepoSecretKey}",
        #         "addons_repo_url": "${schema.spec.gitops.addonsRepoUrl}",
        #         "fleet_repo_basepath": "",
        #         "fleet_repo_path": "${schema.spec.gitops.fleetRepoPath}",
        #         "fleet_repo_revision": "${schema.spec.gitops.fleetRepoRevision}",
        #         "fleet_repo_secret_key": "${schema.spec.gitops.fleetRepoSecretKey}",
        #         "fleet_repo_url": "${schema.spec.gitops.fleetRepoUrl}",
        #         "platform_repo_basepath": "",
        #         "platform_repo_path": "${schema.spec.gitops.platformRepoPath}",
        #         "platform_repo_revision": "${schema.spec.gitops.platformRepoRevision}",
        #         "platform_repo_secret_key": "${schema.spec.gitops.platformRepoSecretKey}",
        #         "platform_repo_url": "${schema.spec.gitops.platformRepoUrl}",
        #         "workload_repo_basepath": "",
        #         "workload_repo_path": "${schema.spec.gitops.workloadRepoPath}",
        #         "workload_repo_revision": "${schema.spec.gitops.workloadRepoRevision}",
        #         "workload_repo_secret_key": "${schema.spec.gitops.workloadRepoSecretKey}",
        #         "workload_repo_url": "${schema.spec.gitops.workloadRepoUrl}",
        #         "external_dns_domain_filters": "${schema.spec.domainName}",
        #         "external_dns_namespace": "${schema.spec.addons.external_dns_namespace}",
        #         "external_dns_policy": "${schema.spec.addons.external_dns_policy}",
        #         "external_dns_service_account": "${schema.spec.addons.external_dns_service_account}",
        #         "external_secrets_namespace": "${schema.spec.addons.external_secrets_namespace}",
        #         "external_secrets_service_account": "${schema.spec.addons.external_secrets_service_account}",

        #         "aws_load_balancer_controller_namespace": "${schema.spec.addons.aws_load_balancer_controller_namespace}",
        #         "aws_load_balancer_controller_service_account": "${schema.spec.addons.aws_load_balancer_controller_service_account}",
        #         "adot_collector_namespace": "${schema.spec.addons.adot_collector_namespace}",
        #         "adot_collector_service_account": "${schema.spec.addons.adot_collector_service_account}",
        #         "amp_endpoint_url": "${schema.spec.addons.amp_endpoint_url}",

        #         "karpenter_namespace": "${schema.spec.addons.karpenter_namespace}",
        #         "karpenter_service_account": "${schema.spec.addons.karpenter_service_account}",
        #         "karpenter_node_iam_role_name": "${nodeRole.metadata.name}",
        #         "karpenter_sqs_queue_name": "${schema.spec.addons.karpenter_sqs_queue_name}",

        #         "fleet_secret_manager_secret_name": "${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}"
        #       },
        #       "server": "${ekscluster.status.endpoint}"
        #     }


    # Copy argocdSecretForACK into secretManager
    - id: argocdAWSSecret
      template:
        apiVersion: secretsmanager.services.k8s.aws/v1alpha1
        kind: Secret
        metadata:
          name: "${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}"
          namespace: "${schema.spec.name}"
          annotations:
            secretRef: "${argocdSecretForACK.metadata.name}"
        spec:
          name: "${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}"
          description: "ArgoCD cluster configuration secret for ${schema.spec.name}"
          tags:
            - key: fleet_member
              value: spoke
            - key: tenant
              value: "${schema.spec.tenant}"
            - key: environment
              value: "${schema.spec.environment}"
            - key: aws_cluster_name
              value: "${schema.spec.name}"
            - key: workloads
              value: "true"
            - key: argocd.argoproj.io/secret-type
              value: cluster
          secretString:
            key: "config"
            name: "${schema.spec.name}-for-ack"
            namespace: "${schema.spec.name}"

    - id: accessEntry
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: AccessEntry
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-access-entry"
        spec:
          clusterName: "${schema.spec.name}"
          accessPolicies:
            - accessScope:
                type: "cluster"
              policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          principalARN: "${argocdRole.status.ackResourceMetadata.arn}"
          type: STANDARD
    - id: accessEntryAdmin
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: AccessEntry
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-access-entry-admin"
        spec:
          clusterName: "${schema.spec.name}"
          accessPolicies:
            - accessScope:
                type: "cluster"
              policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          principalARN: "arn:aws:iam::${schema.spec.accountId}:role/${schema.spec.adminRoleName}"
          type: STANDARD
    - id: oidcProvider
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: OpenIDConnectProvider
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-oidc"
        spec:
          url: "${ekscluster.status.identity.oidc.issuer}"
          clientIDs:
            - sts.amazonaws.com
          thumbprints:
            - '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'


    ###########################################################
    # External Secrets AddOn Pod Identity
    ###########################################################
    - id: externalSecretsRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-secrets-role"
        spec:
          name: "${schema.spec.name}-external-secrets-role"
          policies:
            - arn:aws:iam::aws:policy/SecretsManagerReadWrite
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }
    - id: externalSecretsPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-external-secrets"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: argocd
          roleARN: "${externalSecretsRole.status.ackResourceMetadata.arn}"
          serviceAccount: external-secrets-sa
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: external-secrets

    ###########################################################
    # load balancer controller Pod Identity
    ###########################################################

    - id: awsLoadBalancerControllerPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-aws-load-balancer-controller-policy"
        spec:
          name: "${schema.spec.name}-aws-load-balancer-controller-policy"
          policyDocument: |
            {
                "Statement": [
                    {
                        "Action": "iam:CreateServiceLinkedRole",
                        "Condition": {
                            "StringEquals": {
                                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:DescribeTrustStores",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetGroupAttributes",
                            "elasticloadbalancing:DescribeTags",
                            "elasticloadbalancing:DescribeSSLPolicies",
                            "elasticloadbalancing:DescribeRules",
                            "elasticloadbalancing:DescribeLoadBalancers",
                            "elasticloadbalancing:DescribeLoadBalancerAttributes",
                            "elasticloadbalancing:DescribeListeners",
                            "elasticloadbalancing:DescribeListenerCertificates",
                            "ec2:GetCoipPoolUsage",
                            "ec2:DescribeVpcs",
                            "ec2:DescribeVpcPeeringConnections",
                            "ec2:DescribeTags",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSecurityGroups",
                            "ec2:DescribeNetworkInterfaces",
                            "ec2:DescribeInternetGateways",
                            "ec2:DescribeInstances",
                            "ec2:DescribeCoipPools",
                            "ec2:DescribeAvailabilityZones",
                            "ec2:DescribeAddresses",
                            "ec2:DescribeAccountAttributes"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "wafv2:GetWebACLForResource",
                            "wafv2:GetWebACL",
                            "wafv2:DisassociateWebACL",
                            "wafv2:AssociateWebACL",
                            "waf-regional:GetWebACLForResource",
                            "waf-regional:GetWebACL",
                            "waf-regional:DisassociateWebACL",
                            "waf-regional:AssociateWebACL",
                            "shield:GetSubscriptionState",
                            "shield:DescribeProtection",
                            "shield:DeleteProtection",
                            "shield:CreateProtection",
                            "iam:ListServerCertificates",
                            "iam:GetServerCertificate",
                            "cognito-idp:DescribeUserPoolClient",
                            "acm:ListCertificates",
                            "acm:DescribeCertificate"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "ec2:RevokeSecurityGroupIngress",
                            "ec2:CreateSecurityGroup",
                            "ec2:AuthorizeSecurityGroupIngress"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": "ec2:CreateTags",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            },
                            "StringEquals": {
                                "ec2:CreateAction": "CreateSecurityGroup"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "arn:aws:ec2:*:*:security-group/*"
                    },
                    {
                        "Action": [
                            "ec2:DeleteTags",
                            "ec2:CreateTags"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "arn:aws:ec2:*:*:security-group/*"
                    },
                    {
                        "Action": [
                            "ec2:RevokeSecurityGroupIngress",
                            "ec2:DeleteSecurityGroup",
                            "ec2:AuthorizeSecurityGroupIngress"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:CreateTargetGroup",
                            "elasticloadbalancing:CreateLoadBalancer"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:DeleteRule",
                            "elasticloadbalancing:DeleteListener",
                            "elasticloadbalancing:CreateRule",
                            "elasticloadbalancing:CreateListener"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:RemoveTags",
                            "elasticloadbalancing:AddTags"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                        ]
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:RemoveTags",
                            "elasticloadbalancing:AddTags"
                        ],
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                        ]
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:SetSubnets",
                            "elasticloadbalancing:SetSecurityGroups",
                            "elasticloadbalancing:SetIpAddressType",
                            "elasticloadbalancing:ModifyTargetGroupAttributes",
                            "elasticloadbalancing:ModifyTargetGroup",
                            "elasticloadbalancing:ModifyLoadBalancerAttributes",
                            "elasticloadbalancing:DeleteTargetGroup",
                            "elasticloadbalancing:DeleteLoadBalancer"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": "elasticloadbalancing:AddTags",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            },
                            "StringEquals": {
                                "elasticloadbalancing:CreateAction": [
                                    "CreateTargetGroup",
                                    "CreateLoadBalancer"
                                ]
                            }
                        },
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                        ]
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:RegisterTargets",
                            "elasticloadbalancing:DeregisterTargets"
                        ],
                        "Effect": "Allow",
                        "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:SetWebAcl",
                            "elasticloadbalancing:RemoveListenerCertificates",
                            "elasticloadbalancing:ModifyRule",
                            "elasticloadbalancing:ModifyListener",
                            "elasticloadbalancing:AddListenerCertificates"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                ],
                "Version": "2012-10-17"
            }

    - id: awsLoadBalancerControllerRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-aws-load-balancer-controller-role"
          annotations:
            policy: "${awsLoadBalancerControllerPolicy.status.ackResourceMetadata.arn}"
        spec:
          name: "${schema.spec.name}-aws-load-balancer-controller-role"
          policyRefs:
            - from:
                name: "${schema.spec.name}-aws-load-balancer-controller-policy"
          assumeRolePolicyDocument: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "pods.eks.amazonaws.com"
                        },
                        "Action": [
                            "sts:TagSession",
                            "sts:AssumeRole"
                        ]
                    }
                ]
            }

    - id: awsLoadBalancerControllerPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-aws-load-balancer-controller"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: kube-system
          roleARN: "${awsLoadBalancerControllerRole.status.ackResourceMetadata.arn}"
          serviceAccount: aws-load-balancer-controller-sa
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: aws-load-balancer-controller


    ###########################################################
    # External DNS AddOn Pod Identity
    ###########################################################
    - id: externalDnsPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-dns-policy"
        spec:
          name: "${schema.spec.name}-external-dns-policy"
          policyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ChangeResourceRecordSets"
                  ],
                  "Resource": [
                    "arn:aws:route53:::hostedzone/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ListHostedZones",
                    "route53:ListResourceRecordSets"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }

    - id: externalDnsRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-dns-role"
          annotations:
            policy: "${externalDnsPolicy.status.ackResourceMetadata.arn}"
        spec:
          name: "${schema.spec.name}-external-dns-role"
          policyRefs:
            - from:
                name: "${schema.spec.name}-external-dns-policy"
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: externalDnsPodIdentity
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-dns"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: external-dns
          roleARN: "${externalDnsRole.status.ackResourceMetadata.arn}"
          serviceAccount: external-dns


    ###########################################################
    # ADOT Collector Pod Identity
    ###########################################################
    - id: adotCollectorRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-adot-collector-role"
        spec:
          name: "${schema.spec.name}-adot-collector-role"
          policies:
            - arn:aws:iam::aws:policy/AmazonPrometheusRemoteWriteAccess
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: adotCollectorPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-adot-collector"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: "${schema.spec.addons.adot_collector_namespace}"
          roleARN: "${adotCollectorRole.status.ackResourceMetadata.arn}"
          serviceAccount: "${schema.spec.addons.adot_collector_service_account}"
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: adot-collector


    ###########################################################
    # Kyverno Reporter Pod Identity
    ###########################################################
    - id: kyvernoPolicyReporterRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-kyverno-policy-reporter-role"
        spec:
          name: "${schema.spec.name}-kyverno-policy-reporter-role"
          policies:
            - arn:aws:iam::aws:policy/AWSSecurityHubFullAccess
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: kyvernoPolicyReporterPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-kyverno-policy-reporter"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: kyverno
          roleARN: "${kyvernoPolicyReporterRole.status.ackResourceMetadata.arn}"
          serviceAccount: policy-reporter
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: kyverno-policy-reporter

    ###########################################################
    # CNI Metrics Helper Pod Identity
    ###########################################################
    - id: cniMetricsHelperPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cni-metrics-helper-policy"
        spec:
          name: "${schema.spec.name}-cni-metrics-helper-policy"
          description: "Policy to allow cni metrics helper put metrics to CloudWatch"
          policyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                }
              ]
            }

    - id: cniMetricsHelperRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cni-metrics-helper-role"
        spec:
          name: "${schema.spec.name}-cni-metrics-helper-role"
          policies:
            - ${cniMetricsHelperPolicy.status.ackResourceMetadata.arn}
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: cniMetricsHelperPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-cni-metrics-helper"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: kube-system
          roleARN: "${cniMetricsHelperRole.status.ackResourceMetadata.arn}"
          serviceAccount: cni-metrics-helper
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: cni-metrics-helper

    ###########################################################
    # EBS CSI Controller Pod Identity
    ###########################################################
    - id: ebsCsiControllerRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-ebs-csi-controller-role"
        spec:
          name: "${schema.spec.name}-ebs-csi-controller-role"
          policies:
            - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: ebsCsiControllerPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-ebs-csi-controller"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: kube-system
          roleARN: "${ebsCsiControllerRole.status.ackResourceMetadata.arn}"
          serviceAccount: ebs-csi-controller-sa
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: ebs-csi-controller


    ###########################################################
    # CloudWatch Observability Pod Identity
    ###########################################################
    - id: cloudwatchObservabilityRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cloudwatch-observability-role"
        spec:
          name: "${schema.spec.name}-cloudwatch-observability-role"
          policies:
            - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: cloudwatchObservabilityPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-cloudwatch-observability"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: amazon-cloudwatch
          roleARN: "${cloudwatchObservabilityRole.status.ackResourceMetadata.arn}"
          serviceAccount: cloudwatch-agent
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: cloudwatch-observability

    ###########################################################
    # Karpenter Pod Identity
    ###########################################################
    - id: karpenterPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-karpenter-policy"
        spec:
          name: "${schema.spec.name}-karpenter-policy"
          description: "Policy for Karpenter"
          policyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateLaunchTemplate",
                    "ec2:DeleteLaunchTemplate",
                    "ec2:CreateFleet",
                    "ec2:RunInstances",
                    "ec2:CreateTags",
                    "ec2:TerminateInstances",
                    "ec2:DescribeLaunchTemplates",
                    "ec2:DescribeInstances",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeInstanceTypes",
                    "ec2:DescribeInstanceTypeOfferings",
                    "ec2:DescribeAvailabilityZones",
                    "ssm:GetParameter",
                    "pricing:GetProducts",
                    "pricing:DescribeServices",
                    "pricing:GetAttributeValues",
                    "iam:PassRole"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:RunInstances",
                    "ec2:CreateFleet"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:ec2:*::image/*",
                    "arn:${schema.spec.aws_partition}:ec2:*::snapshot/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:spot-instances-request/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:security-group/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:subnet/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeImages"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:ssm:*:*:parameter/aws/service/eks/optimized-ami/*",
                    "arn:${schema.spec.aws_partition}:ssm:*:*:parameter/aws/service/ami-amazon-linux-latest/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:RunInstances",
                    "ec2:CreateFleet",
                    "ec2:CreateLaunchTemplate"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:ec2:*:*:fleet/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:volume/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:network-interface/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:spot-instances-request/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestTag/kubernetes.io/cluster/${schema.spec.name}": "owned"
                    },
                    "StringLike": {
                      "aws:RequestTag/karpenter.sh/nodepool": "*"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:ec2:*:*:fleet/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:volume/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:network-interface/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:spot-instances-request/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
                      "ec2:CreateAction": [
                        "RunInstances",
                        "CreateFleet",
                        "CreateLaunchTemplate"
                      ]
                    },
                    "StringLike": {
                      "aws:RequestTag/karpenter.sh/nodepool": "*"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags"
                  ],
                  "Resource": "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.sh/nodepool": "*"
                    },
                    "ForAllValues:StringEquals": {
                      "aws:TagKeys": [
                        "karpenter.sh/nodeclaim",
                        "Name"
                      ]
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:TerminateInstances",
                    "ec2:DeleteLaunchTemplate"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
                    "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.sh/nodepool": "*"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeImages",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceTypeOfferings",
                    "ec2:DescribeInstanceTypes",
                    "ec2:DescribeLaunchTemplates",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSpotPriceHistory",
                    "ec2:DescribeSubnets"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestedRegion": "${schema.spec.region}"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:ssm:${schema.spec.region}::parameter/aws/service/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "pricing:GetProducts"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:DeleteMessage",
                    "sqs:GetQueueUrl",
                    "sqs:ReceiveMessage"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:sqs:${schema.spec.region}:${schema.spec.accountId}:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:role/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": "ec2.${schema.spec.aws_dns_suffix}"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateInstanceProfile"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
                      "aws:RequestTag/topology.kubernetes.io/region": "${schema.spec.region}"
                    },
                    "StringLike": {
                      "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:TagInstanceProfile"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
                      "aws:ResourceTag/topology.kubernetes.io/region": "${schema.spec.region}"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*",
                      "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:AddRoleToInstanceProfile",
                    "iam:RemoveRoleFromInstanceProfile",
                    "iam:DeleteInstanceProfile"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
                      "aws:ResourceTag/topology.kubernetes.io/region": "${schema.spec.region}"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:GetInstanceProfile"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "eks:DescribeCluster"
                  ],
                  "Resource": [
                    "arn:${schema.spec.aws_partition}:eks:${schema.spec.region}:${schema.spec.accountId}:cluster/${schema.spec.name}"
                  ]
                }
              ]
            }

    - id: karpenterRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-karpenter-role"
        spec:
          name: "${schema.spec.name}-karpenter-role"
          policies:
            - ${karpenterPolicy.status.ackResourceMetadata.arn}
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: karpenterPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-karpenter"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: "${schema.spec.addons.karpenter_namespace}"
          roleARN: "${karpenterRole.status.ackResourceMetadata.arn}"
          serviceAccount: "${schema.spec.addons.karpenter_service_account}"
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: karpenter

    ###########################################################
    # Karpenter Node Role
    ###########################################################
    # - id: karpenterNodePolicy
    #   template:
    #     apiVersion: iam.services.k8s.aws/v1alpha1
    #     kind: Policy
    #     metadata:
    #       namespace: "${schema.spec.name}
    #       name: "${schema.spec.name}-karpenter-node-policy
    #     spec:
    #       name: "${schema.spec.name}-karpenter-node-policy
    #       description: "Policy for Karpenter Node"
    #       policyDocument: |
    #         {
    #           "Version": "2012-10-17",
    #           "Statement": [
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:CreateLaunchTemplate",
    #                 "ec2:DeleteLaunchTemplate",
    #                 "ec2:CreateFleet",
    #                 "ec2:RunInstances",
    #                 "ec2:CreateTags",
    #                 "ec2:TerminateInstances",
    #                 "ec2:DescribeLaunchTemplates",
    #                 "ec2:DescribeInstances",
    #                 "ec2:DescribeSecurityGroups",
    #                 "ec2:DescribeSubnets",
    #                 "ec2:DescribeInstanceTypes",
    #                 "ec2:DescribeInstanceTypeOfferings",
    #                 "ec2:DescribeAvailabilityZones",
    #                 "ssm:GetParameter",
    #                 "pricing:GetProducts",
    #                 "pricing:DescribeServices",
    #                 "pricing:GetAttributeValues",
    #                 "iam:PassRole"
    #               ],
    #               "Resource": "*"
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:RunInstances",
    #                 "ec2:CreateFleet"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:ec2:*::image/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*::snapshot/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:spot-instances-request/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:security-group/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:subnet/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*"
    #               ]
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:DescribeImages"
    #               ],
    #               "Resource": "*"
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ssm:GetParameter"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:ssm:*:*:parameter/aws/service/eks/optimized-ami/*",
    #                 "arn:${schema.spec.aws_partition}:ssm:*:*:parameter/aws/service/ami-amazon-linux-latest/*"
    #               ]
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "iam:PassRole"
    #               ],
    #               "Resource": "*"
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:RunInstances",
    #                 "ec2:CreateFleet",
    #                 "ec2:CreateLaunchTemplate"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:fleet/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:volume/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:network-interface/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:spot-instances-request/*"
    #               ],
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:RequestTag/kubernetes.io/cluster/${schema.spec.name}": "owned"
    #                 },
    #                 "StringLike": {
    #                   "aws:RequestTag/karpenter.sh/nodepool": "*"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:CreateTags"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:fleet/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:volume/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:network-interface/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:spot-instances-request/*"
    #               ],
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:RequestTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
    #                   "ec2:CreateAction": [
    #                     "RunInstances",
    #                     "CreateFleet",
    #                     "CreateLaunchTemplate"
    #                   ]
    #                 },
    #                 "StringLike": {
    #                   "aws:RequestTag/karpenter.sh/nodepool": "*"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:CreateTags"
    #               ],
    #               "Resource": "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned"
    #                 },
    #                 "StringLike": {
    #                   "aws:ResourceTag/karpenter.sh/nodepool": "*"
    #                 },
    #                 "ForAllValues:StringEquals": {
    #                   "aws:TagKeys": [
    #                     "karpenter.sh/nodeclaim",
    #                     "Name"
    #                   ]
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:TerminateInstances",
    #                 "ec2:DeleteLaunchTemplate"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:instance/*",
    #                 "arn:${schema.spec.aws_partition}:ec2:*:*:launch-template/*"
    #               ],
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned"
    #                 },
    #                 "StringLike": {
    #                   "aws:ResourceTag/karpenter.sh/nodepool": "*"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ec2:DescribeAvailabilityZones",
    #                 "ec2:DescribeImages",
    #                 "ec2:DescribeInstances",
    #                 "ec2:DescribeInstanceTypeOfferings",
    #                 "ec2:DescribeInstanceTypes",
    #                 "ec2:DescribeLaunchTemplates",
    #                 "ec2:DescribeSecurityGroups",
    #                 "ec2:DescribeSpotPriceHistory",
    #                 "ec2:DescribeSubnets"
    #               ],
    #               "Resource": "*",
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:RequestedRegion": "${schema.spec.region}"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "ssm:GetParameter"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:ssm:${schema.spec.region}::parameter/aws/service/*"
    #               ]
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "pricing:GetProducts"
    #               ],
    #               "Resource": "*"
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "sqs:DeleteMessage",
    #                 "sqs:GetQueueUrl",
    #                 "sqs:ReceiveMessage"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:sqs:${schema.spec.region}:${schema.spec.accountId}:*"
    #               ]
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "iam:PassRole"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:role/*"
    #               ],
    #               "Condition": {
    #                 "StringEquals": {
    #                   "iam:PassedToService": "ec2.${schema.spec.dns_suffix}"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "iam:CreateInstanceProfile"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
    #               ],
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:RequestTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
    #                   "aws:RequestTag/topology.kubernetes.io/region": "${schema.spec.region}"
    #                 },
    #                 "StringLike": {
    #                   "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "iam:TagInstanceProfile"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
    #               ],
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
    #                   "aws:ResourceTag/topology.kubernetes.io/region": "${schema.spec.region}"
    #                 },
    #                 "StringLike": {
    #                   "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*",
    #                   "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "iam:AddRoleToInstanceProfile",
    #                 "iam:RemoveRoleFromInstanceProfile",
    #                 "iam:DeleteInstanceProfile"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
    #               ],
    #               "Condition": {
    #                 "StringEquals": {
    #                   "aws:ResourceTag/kubernetes.io/cluster/${schema.spec.name}": "owned",
    #                   "aws:ResourceTag/topology.kubernetes.io/region": "${schema.spec.region}"
    #                 },
    #                 "StringLike": {
    #                   "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*"
    #                 }
    #               }
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "iam:GetInstanceProfile"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:iam::${schema.spec.accountId}:instance-profile/*"
    #               ]
    #             },
    #             {
    #               "Effect": "Allow",
    #               "Action": [
    #                 "eks:DescribeCluster"
    #               ],
    #               "Resource": [
    #                 "arn:${schema.spec.aws_partition}:eks:${schema.spec.region}:${schema.spec.accountId}:cluster/${schema.spec.name}"
    #               ]
    #             }
    #           ]
    #         }

    # - id: karpenterNodeRole
    #   template:
    #     apiVersion: iam.services.k8s.aws/v1alpha1
    #     kind: Role
    #     metadata:
    #       namespace: "${schema.spec.name}
    #       name: "${schema.spec.name}-karpenter-node-role
    #     spec:
    #       name: "${schema.spec.name}-karpenter-node-role
    #       policies:
    #         - ${karpenterNodePolicy.status.ackResourceMetadata.arn}
    #       assumeRolePolicyDocument: |
    #         {
    #           "Version": "2012-10-17",
    #           "Statement": [
    #             {
    #               "Effect": "Allow",
    #               "Principal": {
    #                 "Service": "ec2.amazonaws.com"
    #               },
    #               "Action": [
    #                 "sts:AssumeRole"
    #               ]
    #             }
    #           ]
    #         }

    # - id: karpenterNodeAccessEntry
    #   template:
    #     apiVersion: eks.services.k8s.aws/v1alpha1
    #     kind: AccessEntry
    #     metadata:
    #       namespace: "${schema.spec.name}
    #       name: "${schema.spec.name}-karpenter-node-access-entry
    #     spec:
    #       clusterName: "${schema.spec.name}
    #       accessPolicies:
    #         - accessScope:
    #             type: "cluster"
    #           policyARN: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
    #         - accessScope:
    #             type: "cluster"
    #           policyARN: "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
    #         - accessScope:
    #             type: "cluster"
    #           policyARN: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
    #       principalARN: "${karpenterNodeRole.status.ackResourceMetadata.arn}
    #       type: EC2_LINUX

    # - id: karpenterNodeInstanceProfile
    #   template:
    #     apiVersion: iam.services.k8s.aws/v1alpha1
    #     kind: InstanceProfile
    #     metadata:
    #       namespace: "${schema.spec.name}
    #       name: "${schema.spec.name}-karpenter-node-instance-profile
    #     spec:
    #       name: "${schema.spec.name}-karpenter-node-instance-profile
    #       roles:
    #         - ${karpenterNodeRole.status.ackResourceMetadata.arn}


    ###########################################################
    # XXX Pod Identity
    ###########################################################

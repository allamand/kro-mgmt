# yamllint disable rule:line-length
---
apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: ekscluster.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
spec:
  schema:
    apiVersion: v1alpha1
    kind: EksCluster
    spec:
      name: string
      tenant: string
      environment: string
      region: string
      accountId: string
      managementAccountId: string
      k8sVersion: string
      adminRoleName: string
      #nodesCount: integer
      fleetSecretManagerSecretNameSuffix: string
      domainName: string
      aws_partition: string | default="aws"
      aws_dns_suffix: string | default="amazonaws.com"
      network:
        vpcID: string
        subnets:
          controlplane:
            subnet1ID: string
            subnet2ID: string
          workers:
            subnet1ID: string
            subnet2ID: string
      gitops:
        addonsRepoBasePath: string
        addonsRepoPath: string
        addonsRepoRevision: string
        addonsRepoSecretKey: string
        addonsRepoUrl: string
        fleetRepoBasePath: string
        fleetRepoPath: string
        fleetRepoRevision: string
        fleetRepoSecretKey: string
        fleetRepoUrl: string
        platformRepoBasePath: string
        platformRepoPath: string
        platformRepoRevision: string
        platformRepoSecretKey: string
        platformRepoUrl: string
        workloadRepoBasePath: string
        workloadRepoPath: string
        workloadRepoRevision: string
        workloadRepoSecretKey: string
        workloadRepoUrl: string
      addons:
        adot_collector_namespace: string
        adot_collector_service_account: string

        external_dns_namespace: string
        external_dns_service_account: string
        external_dns_policy: string

        external_secrets_namespace: string
        external_secrets_service_account: string

        amp_endpoint_url: string


  resources:

    ###########################################################
    # EKS Cluster
    ###########################################################
    - id: clusterRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cluster-role"
        spec:
          name: "${schema.spec.name}-cluster-role"
          policies:
            - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
            - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
            - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
            - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }
    - id: nodeRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cluster-node-role"
        spec:
          name: "${schema.spec.name}-cluster-node-role"
          policies:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
            - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
    # https://aws-controllers-k8s.github.io/community/reference/eks/v1alpha1/cluster/
    - id: ekscluster
      readyWhen:
        - ${ekscluster.status.status == "ACTIVE"}
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: Cluster
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}"
          # implicit dependencies with roles
          annotations:
            clusterRoleArn: "${clusterRole.status.ackResourceMetadata.arn}"
            nodeRoleArn: "${nodeRole.status.ackResourceMetadata.arn}"
        spec:
          name: "${schema.spec.name}"
          roleARN: "${clusterRole.status.ackResourceMetadata.arn}"
          version: "${schema.spec.k8sVersion}" # a bug needs to be fixed for this to work
          accessConfig:
            authenticationMode: "API_AND_CONFIG_MAP"
            bootstrapClusterCreatorAdminPermissions: true
          computeConfig:
            enabled: true
            nodeRoleARN: ${nodeRole.status.ackResourceMetadata.arn}
            nodePools:
              - system
              - general-purpose
          kubernetesNetworkConfig:
            ipFamily: ipv4
            elasticLoadBalancing:
              enabled: true
          logging: 
            clusterLogging:
            - enabled: true
              types:
              - api
              - audit
              - authenticator
              - controllerManager
              - scheduler
          storageConfig:
            blockStorage:
              enabled: true
          resourcesVPCConfig:
            endpointPrivateAccess: true
            endpointPublicAccess: true
            subnetIDs:
              - ${schema.spec.network.subnets.controlplane.subnet1ID}
              - ${schema.spec.network.subnets.controlplane.subnet2ID}
          zonalShiftConfig: 
            enabled: true
          tags: 
            kro-management: ${schema.spec.name}
            tenant: ${schema.spec.tenant}
            environment: ${schema.spec.environment}

    # - id: podIdentityAddon
    #   template:
    #     apiVersion: eks.services.k8s.aws/v1alpha1
    #     kind: Addon
    #     metadata:
    #       name: eks-pod-identity-agent
    #       namespace: "${schema.spec.name}"
    #       annotations:
    #         clusterArn: "${ekscluster.status.ackResourceMetadata.arn}"
    #     spec:
    #       name: eks-pod-identity-agent
    #       addonVersion: v1.3.4-eksbuild.1
    #       clusterName: "${schema.spec.name}"

    ###########################################################
    # ArgoCD Integration
    ###########################################################
    - id: argocdRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          name: "${schema.spec.name}-argocd-role"
        spec:
          name: "${schema.spec.name}-argocd-role"
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "arn:aws:iam::${schema.spec.managementAccountId}:role/argocd-hub-role"
                  },
                  "Action": [
                    "sts:TagSession",
                    "sts:AssumeRole"
                  ]
                }
              ]
            }

    - id: argocdSecret
      template:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "${schema.spec.name}"
          namespace: argocd
          labels:
            argocd.argoproj.io/secret-type: cluster
            # Compatible fleet-management
            fleet_member: spoke
            tenant: "${schema.spec.tenant}"
            environment: "${schema.spec.environment}"
            aws_cluster_name: "${schema.spec.name}"
            workloads: "true"
          annotations:
            # GitOps Bridge
            accountId: "${schema.spec.accountId}"
            aws_account_id: "${schema.spec.accountId}"
            region: "${schema.spec.region}"
            aws_region: "${schema.spec.region}"
            aws_central_region: "${schema.spec.region}"   # used in fleet-management gitops
            oidcProvider: "${ekscluster.status.identity.oidc.issuer}"
            aws_cluster_name: "${schema.spec.name}"
            aws_vpc_id: "${schema.spec.network.vpcID}"
            # GitOps Configuration
            addons_repo_basepath: "${schema.spec.gitops.addonsRepoBasePath}"
            addons_repo_path: "${schema.spec.gitops.addonsRepoPath}"
            addons_repo_revision: "${schema.spec.gitops.addonsRepoRevision}"
            addons_repo_secret_key: "${schema.spec.gitops.addonsRepoSecretKey}"
            addons_repo_url: "${schema.spec.gitops.addonsRepoUrl}"
            fleet_repo_basepath: "${schema.spec.gitops.fleetRepoBasePath}"
            fleet_repo_path: "${schema.spec.gitops.fleetRepoPath}"
            fleet_repo_revision: "${schema.spec.gitops.fleetRepoRevision}"
            fleet_repo_secret_key: "${schema.spec.gitops.fleetRepoSecretKey}"
            fleet_repo_url: "${schema.spec.gitops.fleetRepoUrl}"
            platform_repo_basepath: "${schema.spec.gitops.platformRepoBasePath}"
            platform_repo_path: "${schema.spec.gitops.platformRepoPath}"
            platform_repo_revision: "${schema.spec.gitops.platformRepoRevision}"
            platform_repo_secret_key: "${schema.spec.gitops.platformRepoSecretKey}"
            platform_repo_url: "${schema.spec.gitops.platformRepoUrl}"
            workload_repo_basepath: "${schema.spec.gitops.workloadRepoBasePath}"
            workload_repo_path: "${schema.spec.gitops.workloadRepoPath}"
            workload_repo_revision: "${schema.spec.gitops.workloadRepoRevision}"
            workload_repo_secret_key: "${schema.spec.gitops.workloadRepoSecretKey}"
            workload_repo_url: "${schema.spec.gitops.workloadRepoUrl}"
            # Specific for External-DNS
            external_dns_domain_filters: "${schema.spec.domainName}"
            external_dns_namespace: "${schema.spec.addons.external_dns_namespace}"
            external_dns_policy: "${schema.spec.addons.external_dns_policy}"
            external_dns_service_account: "${schema.spec.addons.external_dns_service_account}"

            # Generic
            external_secrets_namespace: "${schema.spec.addons.external_secrets_namespace}"
            external_secrets_service_account: "${schema.spec.addons.external_secrets_service_account}"

            # aws_load_balancer_controller_namespace: "${schema.spec.addons.aws_load_balancer_controller_namespace}"
            # aws_load_balancer_controller_service_account: "${schema.spec.addons.aws_load_balancer_controller_service_account}"

            adot_collector_namespace: "${schema.spec.addons.adot_collector_namespace}"
            adot_collector_service_account: "${schema.spec.addons.adot_collector_service_account}"
            amp_endpoint_url: "${schema.spec.addons.amp_endpoint_url}"

            fleet_secret_manager_secret_name: "${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}"

            # karpenter_namespace: "${schema.spec.addons.karpenter_namespace}"
            # karpenter_node_iam_role_name: "${nodeRole.metadata.name}"
            # karpenter_service_account: "${schema.spec.addons.karpenter_service_account}"
            # karpenter_sqs_queue_name: "${schema.spec.addons.karpenter_sqs_queue_name}"

        type: Opaque
        # TODO bug in KRO, it always see some drifts..
        stringData:
          name: "${schema.spec.name}"
          server: "${ekscluster.status.endpoint}"
          config: |
            {
              "awsAuthConfig": {
                "clusterName": "${schema.spec.name}",
                "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
              },
              "tlsClientConfig": {
                "caData": "${ekscluster.status.certificateAuthority.data}",
                "insecure": false
              }
            }


    - id: accessEntry
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: AccessEntry
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-access-entry"
        spec:
          clusterName: "${schema.spec.name}"
          accessPolicies:
            - accessScope:
                type: "cluster"
              policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          principalARN: "${argocdRole.status.ackResourceMetadata.arn}"
          type: STANDARD

    - id: accessEntryAdmin
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: AccessEntry
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-access-entry-admin"
        spec:
          clusterName: "${schema.spec.name}"
          accessPolicies:
            - accessScope:
                type: "cluster"
              policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          principalARN: "arn:aws:iam::${schema.spec.accountId}:role/${schema.spec.adminRoleName}"
          type: STANDARD


    ###########################################################
    # External Secrets AddOn Pod Identity
    ###########################################################
    - id: externalSecretsRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-secrets-role"
        spec:
          name: "${schema.spec.name}-external-secrets-role"
          policies:
            - arn:aws:iam::aws:policy/SecretsManagerReadWrite
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }
    - id: externalSecretsPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-external-secrets"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: argocd
          roleARN: "${externalSecretsRole.status.ackResourceMetadata.arn}"
          serviceAccount: external-secrets-sa
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: external-secrets

    ###########################################################
    # External DNS AddOn Pod Identity
    ###########################################################
    - id: externalDnsPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-dns-policy"
        spec:
          name: "${schema.spec.name}-external-dns-policy"
          policyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ChangeResourceRecordSets"
                  ],
                  "Resource": [
                    "arn:aws:route53:::hostedzone/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ListHostedZones",
                    "route53:ListResourceRecordSets"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }

    - id: externalDnsRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-dns-role"
          annotations:
            policy: "${externalDnsPolicy.status.ackResourceMetadata.arn}"
        spec:
          name: "${schema.spec.name}-external-dns-role"
          policyRefs:
            - from:
                name: "${schema.spec.name}-external-dns-policy"
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: externalDnsPodIdentity
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-external-dns"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: external-dns
          roleARN: "${externalDnsRole.status.ackResourceMetadata.arn}"
          serviceAccount: external-dns


    ###########################################################
    # ADOT Collector Pod Identity
    ###########################################################
    - id: adotCollectorRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-adot-collector-role"
        spec:
          name: "${schema.spec.name}-adot-collector-role"
          policies:
            - arn:aws:iam::aws:policy/AmazonPrometheusRemoteWriteAccess
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: adotCollectorPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-adot-collector"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: "${schema.spec.addons.adot_collector_namespace}"
          roleARN: "${adotCollectorRole.status.ackResourceMetadata.arn}"
          serviceAccount: "${schema.spec.addons.adot_collector_service_account}"
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: adot-collector


    ###########################################################
    # Kyverno Reporter Pod Identity
    ###########################################################
    - id: kyvernoPolicyReporterRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-kyverno-policy-reporter-role"
        spec:
          name: "${schema.spec.name}-kyverno-policy-reporter-role"
          policies:
            - arn:aws:iam::aws:policy/AWSSecurityHubFullAccess
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: kyvernoPolicyReporterPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-kyverno-policy-reporter"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: kyverno
          roleARN: "${kyvernoPolicyReporterRole.status.ackResourceMetadata.arn}"
          serviceAccount: policy-reporter
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: kyverno-policy-reporter

    ###########################################################
    # CNI Metrics Helper Pod Identity
    ###########################################################
    - id: cniMetricsHelperPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cni-metrics-helper-policy"
        spec:
          name: "${schema.spec.name}-cni-metrics-helper-policy"
          description: "Policy to allow cni metrics helper put metrics to CloudWatch"
          policyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                }
              ]
            }

    - id: cniMetricsHelperRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cni-metrics-helper-role"
        spec:
          name: "${schema.spec.name}-cni-metrics-helper-role"
          policies:
            - ${cniMetricsHelperPolicy.status.ackResourceMetadata.arn}
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: cniMetricsHelperPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-cni-metrics-helper"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: kube-system
          roleARN: "${cniMetricsHelperRole.status.ackResourceMetadata.arn}"
          serviceAccount: cni-metrics-helper
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: cni-metrics-helper

    ###########################################################
    # CloudWatch Observability Pod Identity
    ###########################################################
    - id: cloudwatchObservabilityRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: "${schema.spec.name}"
          name: "${schema.spec.name}-cloudwatch-observability-role"
        spec:
          name: "${schema.spec.name}-cloudwatch-observability-role"
          policies:
            - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: cloudwatchObservabilityPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: "${schema.spec.name}-cloudwatch-observability"
          namespace: "${schema.spec.name}"
        spec:
          clusterName: "${schema.spec.name}"
          namespace: amazon-cloudwatch
          roleARN: "${cloudwatchObservabilityRole.status.ackResourceMetadata.arn}"
          serviceAccount: cloudwatch-agent
          tags:
            environment: "${schema.spec.environment}"
            managedBy: ACK
            application: cloudwatch-observability

    ###########################################################
    # XXX Pod Identity
    ###########################################################

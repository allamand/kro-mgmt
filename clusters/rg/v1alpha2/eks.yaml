# yamllint disable rule:line-length
---
apiVersion: kro.run/v1alpha1
kind: ResourceGroup
metadata:
  name: ekscluster.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
spec:
  schema:
    apiVersion: v1alpha1
    kind: EksCluster
    spec:
      name: string
      tenant: string
      environment: string
      region: string
      accountId: string
      managementAccountId: string
      k8sVersion: string
      adminRoleName: string
      nodesCount: integer
      fleetSecretManagerSecretNameSuffix: string
      domainName: string
      network:
        vpcID: string
        subnets:
          controlplane:
            subnet1ID: string
            subnet2ID: string
          workers:
            subnet1ID: string
            subnet2ID: string
      gitops:
        addonsRepoBasePath: string
        addonsRepoPath: string
        addonsRepoRevision: string
        addonsRepoSecretKey: string
        addonsRepoUrl: string
        fleetRepoBasePath: string
        fleetRepoPath: string
        fleetRepoRevision: string
        fleetRepoSecretKey: string
        fleetRepoUrl: string
        platformRepoBasePath: string
        platformRepoPath: string
        platformRepoRevision: string
        platformRepoSecretKey: string
        platformRepoUrl: string
        workloadRepoBasePath: string
        workloadRepoPath: string
        workloadRepoRevision: string
        workloadRepoSecretKey: string
        workloadRepoUrl: string
      addons:
          adot_collector_namespace: string | default="adot-collector-kubeprometheus"
          adot_collector_service_account: string | default="adot-collector-kubeprometheus"

          external_dns_namespace: string | default="external-dns"
          external_dns_service_account: string | default="external-dns-sa"
          external_dns_policy: string | default="sync"

          external_secrets_namespace: string | default="external-secrets"
          external_secrets_service_account: string | default="external-secrets-sa"
          external_secrets_namespace_fleet: string | default="external-secrets"
          external_secrets_service_account: string | default="external-secrets-sa"

          aws_load_balancer_controller_namespace: string | default="kube-system"
          aws_load_balancer_controller_serviceaccount: string | default="aws-load-balancer-controller-sa"

          amp_endpoint_url: string | default=""

          karpenter_namespace: string | default="karpenter"
          karpenter_service_account: string | default="karpenter-sa"
          #karpenter_sqs_queue_name: string | default="sync"

          # kubeprometheus_stack_namespace: string | default="kubeprometheus-stack"
          # kubeprometheus_stack_serviceaccount: string | default="kubeprometheus-stack-sa"
          # kubeprometheus_stack_policy: string | default="sync"

          # prometheus_namespace: string | default="prometheus"
          # prometheus_serviceaccount: string | default="prometheus-sa"
          # prometheus_policy: string | default="sync"

          # grafana_namespace: string | default="grafana"
          # grafana_serviceaccount: string | default="grafana-sa"
          # grafana_policy: string | default="sync"

          # cert_manager_namespace: string | default="cert-manager"
          # cert_manager_serviceaccount: string | default="cert-manager-sa"
          # cert_manager_policy: string | default="sync"

          # ebs_csi_driver_namespace: string | default="kube-system"
          # ebs_csi_driver_serviceaccount: string | default="ebs-csi-controller-sa"

          # cluster_autoscaler_namespace: string | default="kube-system"
          # cluster_autoscaler_serviceaccount: string | default="cluster-autoscaler-aws-cluster-autoscaler-chart"
          # cluster_autoscaler_policy: string | default="sync"

          # aws_node_termination_handler_namespace: string | default="kube-system"
          # aws_node_termination_handler_serviceaccount: string | default="aws-node-termination-handler-sa"
          # aws_node_termination_handler_policy: string | default="sync"

          # aws_efs_csi_driver_namespace: string | default="kube-system"
          # aws_efs_csi_driver_serviceaccount: string | default="aws-efs-csi-driver-sa"
          # aws_efs_csi_driver_policy: string | default="sync"

          # aws_fsx_csi_driver_namespace: string | default="kube-system"
          # aws_fsx_csi_driver_serviceaccount: string | default="aws-fsx-csi-driver-sa"
          # aws_fsx_csi_driver_policy: string | default="sync"

          # velero_namespace: string | default="velero"
          # velero_serviceaccount: string | default="velero-sa"
          # velero_policy: string | default="sync"

          # velero_backup_bucket: string | default=""

          # aws_cloudwatch_metrics_namespace: string | default="aws-cloudwatch-metrics"
          # aws_cloudwatch_metrics_serviceaccount: string | default="aws-cloudwatch-metrics-sa"
          # aws_cloudwatch_metrics_policy: string | default="sync"

          # aws_xray_sa_namespace: string | default="kube-system"
          # aws_xray_sa_serviceaccount: string | default="aws-xray-sa"

          # aws_observability_namespace: string | default="aws-observability"
          # aws_observability_serviceaccount: string | default="aws-observability-sa"

          # aws_otel_collector_namespace: string | default="aws-otel-collector"
          # aws_otel_collector_serviceaccount: string | default="aws-otel-collector-sa"


          # aws_fluentbit_namespace: string | default="aws-fluentbit-eks"
          # aws_fluentbit_serviceaccount: string | default="aws-fluentbit-eks-sa"





  resources:

    ###########################################################
    # EKS Cluster
    ###########################################################
    - id: clusterRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-cluster-role
        spec:
          name: ${schema.spec.name}-cluster-role
          policies:
            - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "eks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
    - id: nodeRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-cluster-node-role
        spec:
          name: ${schema.spec.name}-cluster-node-role
          policies:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
    # https://aws-controllers-k8s.github.io/community/reference/eks/v1alpha1/cluster/
    - id: ekscluster
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: Cluster
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}
        spec:
          name: ${schema.spec.name}
          roleARN: ${clusterRole.status.ackResourceMetadata.arn}
          # version: ${schema.spec.k8sVersion} a bug needs to be fixed for this to work
          accessConfig:
            authenticationMode: "API_AND_CONFIG_MAP"
          resourcesVPCConfig:
            endpointPrivateAccess: false
            endpointPublicAccess: true
            subnetIDs:
              - ${schema.spec.network.subnets.controlplane.subnet1ID}
              - ${schema.spec.network.subnets.controlplane.subnet2ID}
    - id: nodegroup
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: Nodegroup
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-nodegroup
        spec:
          name: ${schema.spec.name}-nodegroup
          clusterName: ${schema.spec.name}
          subnets:
            - ${schema.spec.network.subnets.workers.subnet1ID}
            - ${schema.spec.network.subnets.workers.subnet2ID}
          nodeRole: ${nodeRole.status.ackResourceMetadata.arn}
          updateConfig:
            maxUnavailable: 1
          scalingConfig:
            minSize: 6      # ${schema.spec.nodesCount} a bug needs to be fixed for this to work
            maxSize: 6      # ${schema.spec.nodesCount} a bug needs to be fixed for this to work
            desiredSize: 6  # ${schema.spec.nodesCount} a bug needs to be fixed for this to work
    - id: podIdentityAddon
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: Addon
        metadata:
          name: eks-pod-identity-agent
          namespace: ${schema.spec.name}
        spec:
          name: eks-pod-identity-agent
          addonVersion: v1.3.4-eksbuild.1
          clusterName: ${schema.spec.name}

    ###########################################################
    # ArgoCD Integration
    ###########################################################
    - id: argocdRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          name: ${schema.spec.name}-argocd-role
        spec:
          name: ${schema.spec.name}-argocd-role
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "arn:aws:iam::${schema.spec.managementAccountId}:role/argocd-hub-role"
                  },
                  "Action": [
                    "sts:TagSession",
                    "sts:AssumeRole"
                  ]
                }
              ]
            }
    - id: argocdSecret
      template:
        apiVersion: v1
        kind: Secret
        metadata:
          name: ${schema.spec.name}
          namespace: argocd
          labels:
            argocd.argoproj.io/secret-type: cluster
            # compatible fleet-management
            fleet_member: spoke
            tenant: ${schema.spec.tenant}
            environment: ${schema.spec.environment}
            aws_cluster_name: ${schema.spec.name}
            workloads: "true"
          annotations:
            # GitOps Bridge
            accountId: ${schema.spec.accountId}
            aws_account_id: ${schema.spec.accountId}
            region: ${schema.spec.region}
            aws_region: ${schema.spec.region}
            aws_central_region: ${schema.spec.region}   # used in fleet-management gitops
            oidcProvider: ${ekscluster.status.identity.oidc.issuer}
            aws_cluster_name: ${schema.spec.name}
            aws_vpc_id: ${schema.spec.network.vpcID}
            # GitOps Configuration
            addons_repo_basepath: ${schema.spec.gitops.addonsRepoBasePath}
            addons_repo_path: ${schema.spec.gitops.addonsRepoPath}
            addons_repo_revision: ${schema.spec.gitops.addonsRepoRevision}
            addons_repo_secret_key: ${schema.spec.gitops.addonsRepoSecretKey}
            addons_repo_url: ${schema.spec.gitops.addonsRepoUrl}
            fleet_repo_basepath: ${schema.spec.gitops.fleetRepoBasePath}
            fleet_repo_path: ${schema.spec.gitops.fleetRepoPath}
            fleet_repo_revision: ${schema.spec.gitops.fleetRepoRevision}
            fleet_repo_secret_key: ${schema.spec.gitops.fleetRepoSecretKey}
            fleet_repo_url: ${schema.spec.gitops.fleetRepoUrl}
            platform_repo_basepath: ${schema.spec.gitops.platformRepoBasePath}
            platform_repo_path: ${schema.spec.gitops.platformRepoPath}
            platform_repo_revision: ${schema.spec.gitops.platformRepoRevision}
            platform_repo_secret_key: ${schema.spec.gitops.platformRepoSecretKey}
            platform_repo_url: ${schema.spec.gitops.platformRepoUrl}
            workload_repo_basepath: ${schema.spec.gitops.workloadRepoBasePath}
            workload_repo_path: ${schema.spec.gitops.workloadRepoPath}
            workload_repo_revision: ${schema.spec.gitops.workloadRepoRevision}
            workload_repo_secret_key: ${schema.spec.gitops.workloadRepoSecretKey}
            workload_repo_url: ${schema.spec.gitops.workloadRepoUrl}
            # Specific for External-DNS
            external_dns_domain_filters: ${schema.spec.domainName}
            external_dns_namespace: ${schema.spec.addons.external_dns_namespace}
            external_dns_policy: ${schema.spec.addons.external_dns_policy}
            external_dns_service_account: ${schema.spec.addons.external_dns_service_account}

            # Generic
            external_secrets_namespace: $(schema.spec.addons.external_secrets_namespace)
            external_secrets_service_account: $(schema.spec.addons.external_secrets_service_account)

            aws_load_balancer_controller_namespace: $(schema.spec.addons.aws_load_balancer_controller_namespace)
            aws_load_balancer_controller_service_account: $(schema.spec.addons.aws_load_balancer_controller_service_account)

            adot_collector_namespace: $(schema.spec.addons.adot_collector_namespace)
            adot_collector_serviceaccount: $(schema.spec.addons.adot_collector_serviceaccount)
            amp_endpoint_url: $(schema.spec.addons.amp_endpoint_url)

            # amp_endpoint_url=https://aps-workspaces.eu-west-1.amazonaws.com/workspaces/ws-2ca820a0-a732-4c4b-8f76-3b84e38f8f44/

            fleet_secret_manager_secret_name: ${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}
            #fleet_secret_manager_secret_name: "workload-cluster3-argocd-secret5"

            # karpenter_namespace=kube-system
            # karpenter_node_iam_role_name=Karpenter-fleet-spoke-prod-20241108160545410700000034
            # karpenter_service_account=karpenter
            # karpenter_sqs_queue_name=Karpenter-fleet-spoke-prod

        type: Opaque
        stringData:
          name: ${schema.spec.name}
          server: "${ekscluster.status.endpoint}"
          config: |
            {
              "awsAuthConfig": {
                "clusterName": "${schema.spec.name}",
                "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
              },
              "tlsClientConfig": {
                "caData": "${ekscluster.status.certificateAuthority.data}",
                "insecure": false
              }
            }

    - id: argocdSecretForACK
      template:
        apiVersion: v1
        kind: Secret
        metadata:
          name: ${schema.spec.name}-for-ack
          namespace: ${schema.spec.name}

        type: Opaque
        stringData:
          name: ${schema.spec.name}
          server: "${ekscluster.status.endpoint}"
          # use k8sVersion need to fix bug, use 1.30 for now
          config: |
            {
              "addons": {
                "aws_cluster_name": "${schema.spec.name}",
                "kubernetes_version": "1.30"
              },
              "config": {
                "awsAuthConfig": {
                  "clusterName": "${schema.spec.name}",
                  "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
                },
                "tlsClientConfig": {
                  "caData": "${ekscluster.status.certificateAuthority.data}",
                  "insecure": false
                }
              },
              "metadata": {
                "accountId": "${schema.spec.accountId}",
                "aws_account_id": "${schema.spec.accountId}",
                "region": "${schema.spec.region}",
                "aws_region": "${schema.spec.region}",
                "aws_central_region": "${schema.spec.region}",
                "oidcProvider": "${ekscluster.status.identity.oidc.issuer}",
                "aws_cluster_name": "${schema.spec.name}",
                "aws_vpc_id": "${schema.spec.network.vpcID}",
                "addons_repo_basepath": "",
                "addons_repo_path": "${schema.spec.gitops.addonsRepoPath}",
                "addons_repo_revision": "${schema.spec.gitops.addonsRepoRevision}",
                "addons_repo_secret_key": "${schema.spec.gitops.addonsRepoSecretKey}",
                "addons_repo_url": "${schema.spec.gitops.addonsRepoUrl}",
                "fleet_repo_basepath": "",
                "fleet_repo_path": "${schema.spec.gitops.fleetRepoPath}",
                "fleet_repo_revision": "${schema.spec.gitops.fleetRepoRevision}",
                "fleet_repo_secret_key": "${schema.spec.gitops.fleetRepoSecretKey}",
                "fleet_repo_url": "${schema.spec.gitops.fleetRepoUrl}",
                "platform_repo_basepath": "",
                "platform_repo_path": "${schema.spec.gitops.platformRepoPath}",
                "platform_repo_revision": "${schema.spec.gitops.platformRepoRevision}",
                "platform_repo_secret_key": "${schema.spec.gitops.platformRepoSecretKey}",
                "platform_repo_url": "${schema.spec.gitops.platformRepoUrl}",
                "workload_repo_basepath": "",
                "workload_repo_path": "${schema.spec.gitops.workloadRepoPath}",
                "workload_repo_revision": "${schema.spec.gitops.workloadRepoRevision}",
                "workload_repo_secret_key": "${schema.spec.gitops.workloadRepoSecretKey}",
                "workload_repo_url": "${schema.spec.gitops.workloadRepoUrl}",
                "external_dns_domain_filters": "${schema.spec.domainName}",
                "external_dns_namespace": "$(schema.spec.addons.external_dns_namespace)",
                "external_dns_policy": "$(schema.spec.addons.external_dns_policy)",
                "external_dns_service_account": "$(schema.spec.addons.external_dns_service_account)", 
                "external_secrets_namespace": "$(schema.spec.addons.external_secrets_namespace)",
                "external_secrets_service_account": "$(schema.spec.addons.external_secrets_service_account)",

                "aws_load_balancer_controller_namespace": "$(schema.spec.addons.aws_load_balancer_controller_namespace)",
                "aws_load_balancer_controller_service_account": "$(schema.spec.addons.aws_load_balancer_controller_service_account)",
                "adot_collector_namespace": "$(schema.spec.addons.adot_collector_namespace)",
                "adot_collector_serviceaccount": "$(schema.spec.addons.adot_collector_serviceaccount)",
                "amp_endpoint_url": "$(schema.spec.addons.amp_endpoint_url)",

                "karpenter_namespace": "$(schema.spec.addons.karpenter_namespace)",
                "karpenter_service_account": "$(schema.spec.addons.karpenter_service_account)",
                #"karpenter_sqs_queue_name": #TODO create SQS queuek

                "fleet_secret_manager_secret_name": "${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}"
              },
              "server": "${ekscluster.status.endpoint}"
            }

    - id: argocdAWSSecret
      template:
        apiVersion: secretsmanager.services.k8s.aws/v1alpha1
        kind: Secret
        metadata:
          name: ${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}
          namespace: ${schema.spec.name}
        spec:
          name: ${schema.spec.name}-${schema.spec.fleetSecretManagerSecretNameSuffix}
          description: "ArgoCD cluster configuration secret for ${schema.spec.name}"
          tags:
            - key: fleet_member
              value: spoke
            - key: tenant
              value: ${schema.spec.tenant}
            - key: environment
              value: ${schema.spec.environment}
            - key: aws_cluster_name
              value: ${schema.spec.name}
            - key: workloads
              value: "true"
            - key: argocd.argoproj.io/secret-type
              value: cluster
          secretString:
            key: "config"
            name: ${schema.spec.name}-for-ack
            namespace: ${schema.spec.name}

    - id: accessEntry
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: AccessEntry
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-access-entry
        spec:
          clusterName: ${schema.spec.name}
          accessPolicies:
            - accessScope:
                type: "cluster"
              policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          principalARN: "${argocdRole.status.ackResourceMetadata.arn}"
          type: STANDARD
    - id: accessEntryAdmin
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: AccessEntry
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-access-entry-admin
        spec:
          clusterName: ${schema.spec.name}
          accessPolicies:
            - accessScope:
                type: "cluster"
              policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          principalARN: "arn:aws:iam::${schema.spec.accountId}:role/${schema.spec.adminRoleName}"
          type: STANDARD
    - id: oidcProvider
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: OpenIDConnectProvider
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-oidc
        spec:
          url: ${ekscluster.status.identity.oidc.issuer}
          clientIDs:
            - sts.amazonaws.com
          thumbprints:
            - '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'


    ###########################################################
    # External Secrets AddOn
    ###########################################################
    - id: externalSecretsRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-external-secrets-role
        spec:
          name: ${schema.spec.name}-external-secrets-role
          policies:
            - arn:aws:iam::aws:policy/SecretsManagerReadWrite
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }
    - id: externalSecretsPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: ${schema.spec.name}-external-secrets
          namespace: ${schema.spec.name}
        spec:
          clusterName: ${schema.spec.name}
          namespace: argocd
          roleARN: ${externalSecretsRole.status.ackResourceMetadata.arn}
          serviceAccount: external-secrets-sa
          tags:
            environment: ${schema.spec.environment}
            managedBy: ACK
            application: external-secrets

    ###########################################################
    # load balancer controller
    ###########################################################
    - id: awsLoadBalancerControllerRole
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-aws-load-balancer-controller-role
        spec:
          name: ${schema.spec.name}-aws-load-balancer-controller-role
          policyRefs:
            - from:
                name: ${schema.spec.name}-aws-load-balancer-controller-policy
          assumeRolePolicyDocument: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "pods.eks.amazonaws.com"
                        },
                        "Action": [
                            "sts:TagSession",
                            "sts:AssumeRole"
                        ]
                    }
                ]
            }

    - id: awsLoadBalancerControllerPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-aws-load-balancer-controller-policy
        spec:
          name: ${schema.spec.name}-aws-load-balancer-controller-policy
          policyDocument: |
            {
                "Statement": [
                    {
                        "Action": "iam:CreateServiceLinkedRole",
                        "Condition": {
                            "StringEquals": {
                                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:DescribeTrustStores",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetGroupAttributes",
                            "elasticloadbalancing:DescribeTags",
                            "elasticloadbalancing:DescribeSSLPolicies",
                            "elasticloadbalancing:DescribeRules",
                            "elasticloadbalancing:DescribeLoadBalancers",
                            "elasticloadbalancing:DescribeLoadBalancerAttributes",
                            "elasticloadbalancing:DescribeListeners",
                            "elasticloadbalancing:DescribeListenerCertificates",
                            "ec2:GetCoipPoolUsage",
                            "ec2:DescribeVpcs",
                            "ec2:DescribeVpcPeeringConnections",
                            "ec2:DescribeTags",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSecurityGroups",
                            "ec2:DescribeNetworkInterfaces",
                            "ec2:DescribeInternetGateways",
                            "ec2:DescribeInstances",
                            "ec2:DescribeCoipPools",
                            "ec2:DescribeAvailabilityZones",
                            "ec2:DescribeAddresses",
                            "ec2:DescribeAccountAttributes"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "wafv2:GetWebACLForResource",
                            "wafv2:GetWebACL",
                            "wafv2:DisassociateWebACL",
                            "wafv2:AssociateWebACL",
                            "waf-regional:GetWebACLForResource",
                            "waf-regional:GetWebACL",
                            "waf-regional:DisassociateWebACL",
                            "waf-regional:AssociateWebACL",
                            "shield:GetSubscriptionState",
                            "shield:DescribeProtection",
                            "shield:DeleteProtection",
                            "shield:CreateProtection",
                            "iam:ListServerCertificates",
                            "iam:GetServerCertificate",
                            "cognito-idp:DescribeUserPoolClient",
                            "acm:ListCertificates",
                            "acm:DescribeCertificate"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "ec2:RevokeSecurityGroupIngress",
                            "ec2:CreateSecurityGroup",
                            "ec2:AuthorizeSecurityGroupIngress"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": "ec2:CreateTags",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            },
                            "StringEquals": {
                                "ec2:CreateAction": "CreateSecurityGroup"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "arn:aws:ec2:*:*:security-group/*"
                    },
                    {
                        "Action": [
                            "ec2:DeleteTags",
                            "ec2:CreateTags"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "arn:aws:ec2:*:*:security-group/*"
                    },
                    {
                        "Action": [
                            "ec2:RevokeSecurityGroupIngress",
                            "ec2:DeleteSecurityGroup",
                            "ec2:AuthorizeSecurityGroupIngress"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:CreateTargetGroup",
                            "elasticloadbalancing:CreateLoadBalancer"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:DeleteRule",
                            "elasticloadbalancing:DeleteListener",
                            "elasticloadbalancing:CreateRule",
                            "elasticloadbalancing:CreateListener"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:RemoveTags",
                            "elasticloadbalancing:AddTags"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                        ]
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:RemoveTags",
                            "elasticloadbalancing:AddTags"
                        ],
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                        ]
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:SetSubnets",
                            "elasticloadbalancing:SetSecurityGroups",
                            "elasticloadbalancing:SetIpAddressType",
                            "elasticloadbalancing:ModifyTargetGroupAttributes",
                            "elasticloadbalancing:ModifyTargetGroup",
                            "elasticloadbalancing:ModifyLoadBalancerAttributes",
                            "elasticloadbalancing:DeleteTargetGroup",
                            "elasticloadbalancing:DeleteLoadBalancer"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": "elasticloadbalancing:AddTags",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            },
                            "StringEquals": {
                                "elasticloadbalancing:CreateAction": [
                                    "CreateTargetGroup",
                                    "CreateLoadBalancer"
                                ]
                            }
                        },
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                        ]
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:RegisterTargets",
                            "elasticloadbalancing:DeregisterTargets"
                        ],
                        "Effect": "Allow",
                        "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                    {
                        "Action": [
                            "elasticloadbalancing:SetWebAcl",
                            "elasticloadbalancing:RemoveListenerCertificates",
                            "elasticloadbalancing:ModifyRule",
                            "elasticloadbalancing:ModifyListener",
                            "elasticloadbalancing:AddListenerCertificates"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                ],
                "Version": "2012-10-17"
            }

    - id: awsLoadBalancerControllerPodIdentityAssociation
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          name: ${schema.spec.name}-aws-load-balancer-controller
          namespace: ${schema.spec.name}
        spec:
          clusterName: ${schema.spec.name}
          namespace: kube-system
          roleARN: ${awsLoadBalancerControllerRole.status.ackResourceMetadata.arn}
          serviceAccount: aws-load-balancer-controller-sa
          tags:
            environment: ${schema.spec.environment}
            managedBy: ACK
            application: aws-load-balancer-controller


    ###########################################################
    # External DNS AddOn
    ###########################################################
    - id: externalDnsPolicy
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Policy
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-external-dns-policy
        spec:
          name: ${schema.spec.name}-external-dns-policy
          policyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ChangeResourceRecordSets"
                  ],
                  "Resource": [
                    "arn:aws:route53:::hostedzone/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ListHostedZones",
                    "route53:ListResourceRecordSets"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }

    - id: externalDnsRole
      # dependsOn:
      #   - externalDnsPolicy    
      template:
        apiVersion: iam.services.k8s.aws/v1alpha1
        kind: Role
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-external-dns-role
        spec:
          name: ${schema.spec.name}-external-dns-role
          policyRefs:
            - from:
                name: ${schema.spec.name}-external-dns-policy
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "pods.eks.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRole",
                    "sts:TagSession"
                  ]
                }
              ]
            }

    - id: externalDnsPodIdentity
      # dependsOn:
      #   - externalDnsRole    
      template:
        apiVersion: eks.services.k8s.aws/v1alpha1
        kind: PodIdentityAssociation
        metadata:
          namespace: ${schema.spec.name}
          name: ${schema.spec.name}-external-dns
        spec:
          clusterName: ${schema.spec.name}
          namespace: external-dns
          roleARN: ${externalDnsRole.status.ackResourceMetadata.arn}
          serviceAccount: external-dns


  ###########################################################
  # ADOT Collector
  ###########################################################
  - id: adotCollectorRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-adot-collector-role
      spec:
        name: ${schema.spec.name}-adot-collector-role
        policies:
          - arn:aws:iam::aws:policy/AmazonPrometheusRemoteWriteAccess
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "pods.eks.amazonaws.com"
                },
                "Action": [
                  "sts:AssumeRole",
                  "sts:TagSession"
                ]
              }
            ]
          }

  - id: adotCollectorPodIdentityAssociation
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: PodIdentityAssociation
      metadata:
        name: ${schema.spec.name}-adot-collector
        namespace: ${schema.spec.name}
      spec:
        clusterName: ${schema.spec.name}
        namespace: ${schema.spec.addons.adot_collector_namespace}
        roleARN: ${adotCollectorRole.status.ackResourceMetadata.arn}
        serviceAccount: ${schema.spec.addons.adot_collector_serviceaccount}
        tags:
          environment: ${schema.spec.environment}
          managedBy: ACK
          application: adot-collector
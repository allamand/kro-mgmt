apiVersion: kro.run/v1alpha1
kind: ResourceGroup
metadata:
  name: ekscluster.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
spec:
  schema:
    apiVersion: v1alpha1
    kind: EksCluster
    spec:
      name: string
      tenant: string
      environment: string
      region: string
      accountId: string
      managementAccountId: string
      k8sVersion: string
      adminRoleName: string
      nodesCount: integer
      domainName: string
      network:
        vpcID: string
        subnets:
          controlplane:
            subnet1ID: string
            subnet2ID: string
          workers:
            subnet1ID: string
            subnet2ID: string
      gitops:
        addonsRepoBasePath: string        
        addonsRepoPath: string
        addonsRepoRevision: string
        addonsRepoSecretKey: string
        addonsRepoUrl: string
        fleetRepoBasePath: string
        fleetRepoPath: string
        fleetRepoRevision: string
        fleetRepoSecretKey: string
        fleetRepoUrl: string
        platformRepoBasePath: string
        platformRepoPath: string
        platformRepoRevision: string
        platformRepoSecretKey: string
        platformRepoUrl: string
        workloadRepoBasePath: string
        workloadRepoPath: string
        workloadRepoRevision: string
        workloadRepoSecretKey: string
        workloadRepoUrl: string

  resources:
  - id: clusterRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-cluster-role
      spec:
        name: ${schema.spec.name}-cluster-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
  - id: nodeRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-cluster-node-role
      spec:
        name: ${schema.spec.name}-cluster-node-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
  - id: ekscluster # https://aws-controllers-k8s.github.io/community/reference/eks/v1alpha1/cluster/
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Cluster
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}
      spec:
        name: ${schema.spec.name}
        roleARN: ${clusterRole.status.ackResourceMetadata.arn}
        accessConfig:
          authenticationMode: "API_AND_CONFIG_MAP"
        resourcesVPCConfig:
          endpointPrivateAccess: false
          endpointPublicAccess: true
          subnetIDs:
            - ${schema.spec.network.subnets.controlplane.subnet1ID}
            - ${schema.spec.network.subnets.controlplane.subnet2ID}
        #version: ${schema.spec.k8sVersion} a bug needs to be fixed for this to work
  - id: nodegroup
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Nodegroup
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-nodegroup
      spec:
        name: ${schema.spec.name}-nodegroup
        clusterName: ${schema.spec.name}
        subnets:
          - ${schema.spec.network.subnets.workers.subnet1ID}
          - ${schema.spec.network.subnets.workers.subnet2ID}
        nodeRole: ${nodeRole.status.ackResourceMetadata.arn}
        updateConfig:
          maxUnavailable: 1
        scalingConfig:
          minSize: 3 #${schema.spec.nodesCount} a bug needs to be fixed for this to work
          maxSize: 3 #${schema.spec.nodesCount} a bug needs to be fixed for this to work
          desiredSize: 3 #${schema.spec.nodesCount} a bug needs to be fixed for this to work
  - id: podIdentityAddon
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Addon
      metadata:
        name: eks-pod-identity-agent
        namespace: ${schema.spec.name}
      spec:
        name: eks-pod-identity-agent
        addonVersion: v1.3.4-eksbuild.1
        #addonVersion: v1.3.4
        clusterName: ${schema.spec.name}
        #podIdentityAssociations:
        #  - roleARN: ${externalSecretsRole.status.ackResourceMetadata.arn}
        #    serviceAccount: external-secrets-sa
  - id: argocdRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: ${schema.spec.name}-argocd-role
      spec:
        name: ${schema.spec.name}-argocd-role
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "AWS": "arn:aws:iam::${schema.spec.managementAccountId}:role/argocd-hub-role"
                },
                "Action": [
                  "sts:TagSession",
                  "sts:AssumeRole"
                ]
              }
            ]
          }
  - id: argocdSecret
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${schema.spec.name}
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: cluster
          #compatible fleet-management
          fleet_member: spoke
          tenant: ${schema.spec.tenant}
          environment: ${schema.spec.environment}
          aws_cluster_name: ${schema.spec.name}
          workloads: "true"
        annotations:
          #GitOps Bridge
          accountId: ${schema.spec.accountId}
          aws_account_id: ${schema.spec.accountId}
          region: ${schema.spec.region}
          aws_region: ${schema.spec.region}
          aws_central_region: ${schema.spec.region} # used in fleet-management gitops
          oidcProvider: ${ekscluster.status.identity.oidc.issuer}
          aws_cluster_name: ${schema.spec.name}
          aws_vpc_id: ${schema.spec.network.vpcID}
          #GitOps Configuration
          addons_repo_basepath: ${schema.spec.gitops.addonsRepoBasePath}
          addons_repo_path: ${schema.spec.gitops.addonsRepoPath}
          addons_repo_revision: ${schema.spec.gitops.addonsRepoRevision}
          addons_repo_secret_key: ${schema.spec.gitops.addonsRepoSecretKey}
          addons_repo_url: ${schema.spec.gitops.addonsRepoUrl}
          fleet_repo_basepath: ${schema.spec.gitops.fleetRepoBasePath}
          fleet_repo_path: ${schema.spec.gitops.fleetRepoPath}
          fleet_repo_revision: ${schema.spec.gitops.fleetRepoRevision}
          fleet_repo_secret_key: ${schema.spec.gitops.fleetRepoSecretKey}
          fleet_repo_url: ${schema.spec.gitops.fleetRepoUrl}
          platform_repo_basepath: ${schema.spec.gitops.platformRepoBasePath}
          platform_repo_path: ${schema.spec.gitops.platformRepoPath}
          platform_repo_revision: ${schema.spec.gitops.platformRepoRevision}
          platform_repo_secret_key: ${schema.spec.gitops.platformRepoSecretKey}
          platform_repo_url: ${schema.spec.gitops.platformRepoUrl}
          workload_repo_basepath: ${schema.spec.gitops.workloadRepoBasePath}
          workload_repo_path: ${schema.spec.gitops.workloadRepoPath}
          workload_repo_revision: ${schema.spec.gitops.workloadRepoRevision}
          workload_repo_secret_key: ${schema.spec.gitops.workloadRepoSecretKey}
          workload_repo_url: ${schema.spec.gitops.workloadRepoUrl}
          #Specific for External-DNS
          external_dns_domain_filters: ${schema.spec.domainName}
          external_dns_namespace: external-dns
          external_dns_policy: sync

          #Generic
          external_dns_service_account: external-dns-sa
          external_secrets_namespace: external-secrets
          external_secrets_namespace_fleet: argocd
          external_secrets_service_account: external-secrets-sa
          external_secrets_service_account_fleet: external-secrets-sa
          aws_load_balancer_controller_namespace: kube-system
          aws_load_balancer_controller_service_account: aws-load-balancer-controller-sa
          adot_collector_namespace: adot-collector-kubeprometheus
          adot_collector_serviceaccount: adot-collector-kubeprometheus
          amp_endpoint_url: ""
          # amp_endpoint_url=https://aps-workspaces.eu-west-1.amazonaws.com/workspaces/ws-2ca820a0-a732-4c4b-8f76-3b84e38f8f44/
          
          #fleet_secret_manager_secret_name=fleet-hub-cluster/fleet-spoke-prod
          
          # karpenter_namespace=kube-system
          # karpenter_node_iam_role_name=Karpenter-fleet-spoke-prod-20241108160545410700000034
          # karpenter_service_account=karpenter
          # karpenter_sqs_queue_name=Karpenter-fleet-spoke-prod
          
      type: Opaque
      stringData:
        name: ${schema.spec.name}
        server: "${ekscluster.status.endpoint}"
        config: |
          {
            "awsAuthConfig": {
              "clusterName": "${schema.spec.name}",
              "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
            },
            "tlsClientConfig": {
              "insecure": false,
              "caData": "${ekscluster.status.certificateAuthority.data}"
            }
          }
  - id: argocdAWSSecret
    template:
      apiVersion: secretsmanager.services.k8s.aws/v1alpha1
      kind: Secret
      metadata:
        name: ${schema.spec.name}-argocd-secret
      spec:
        name: ${schema.spec.name}-argocd-secret
        description: "ArgoCD cluster configuration secret for ${schema.spec.name}"
        tags:
          - key: fleet_member
            value: spoke
          - key: tenant
            value: ${schema.spec.tenant}
          - key: environment
            value: ${schema.spec.environment}
          - key: aws_cluster_name
            value: ${schema.spec.name}
          - key: workloads
            value: "true"
          - key: argocd.argoproj.io/secret-type
            value: cluster
        secretString: 
          key: "test"

        # secretString: |
        #   {
        #     "metadata": {
        #       "annotations": {
        #         "accountId": "${schema.spec.accountId}",
        #         "aws_account_id": "${schema.spec.accountId}",
        #         "region": "${schema.spec.region}",
        #         "aws_region": "${schema.spec.region}",
        #         "aws_central_region": "${schema.spec.region}",
        #         "oidcProvider": "${ekscluster.status.identity.oidc.issuer}",
        #         "aws_cluster_name": "${schema.spec.name}",
        #         "aws_vpc_id": "${schema.spec.network.vpcID}",
        #         "addons_repo_basepath": "${schema.spec.gitops.addonsRepoBasePath}",
        #         "addons_repo_path": "${schema.spec.gitops.addonsRepoPath}",
        #         "addons_repo_revision": "${schema.spec.gitops.addonsRepoRevision}",
        #         "addons_repo_secret_key": "${schema.spec.gitops.addonsRepoSecretKey}",
        #         "addons_repo_url": "${schema.spec.gitops.addonsRepoUrl}",
        #         "fleet_repo_basepath": "${schema.spec.gitops.fleetRepoBasePath}",
        #         "fleet_repo_path": "${schema.spec.gitops.fleetRepoPath}",
        #         "fleet_repo_revision": "${schema.spec.gitops.fleetRepoRevision}",
        #         "fleet_repo_secret_key": "${schema.spec.gitops.fleetRepoSecretKey}",
        #         "fleet_repo_url": "${schema.spec.gitops.fleetRepoUrl}",
        #         "platform_repo_basepath": "${schema.spec.gitops.platformRepoBasePath}",
        #         "platform_repo_path": "${schema.spec.gitops.platformRepoPath}",
        #         "platform_repo_revision": "${schema.spec.gitops.platformRepoRevision}",
        #         "platform_repo_secret_key": "${schema.spec.gitops.platformRepoSecretKey}",
        #         "platform_repo_url": "${schema.spec.gitops.platformRepoUrl}",
        #         "workload_repo_basepath": "${schema.spec.gitops.workloadRepoBasePath}",
        #         "workload_repo_path": "${schema.spec.gitops.workloadRepoPath}",
        #         "workload_repo_revision": "${schema.spec.gitops.workloadRepoRevision}",
        #         "workload_repo_secret_key": "${schema.spec.gitops.workloadRepoSecretKey}",
        #         "workload_repo_url": "${schema.spec.gitops.workloadRepoUrl}",
        #         "external_dns_domain_filters": "${schema.spec.domainName}",
        #         "external_dns_namespace": "external-dns",
        #         "external_dns_policy": "sync",
        #         "external_dns_service_account": "external-dns-sa",
        #         "external_secrets_namespace": "external-secrets",
        #         "external_secrets_namespace_fleet": "argocd",
        #         "external_secrets_service_account": "external-secrets-sa",
        #         "external_secrets_service_account_fleet": "external-secrets-sa",
        #         "aws_load_balancer_controller_namespace": "kube-system",
        #         "aws_load_balancer_controller_service_account": "aws-load-balancer-controller-sa",
        #         "adot_collector_namespace": "adot-collector-kubeprometheus",
        #         "adot_collector_serviceaccount": "adot-collector-kubeprometheus",
        #         "amp_endpoint_url": ""
        #       }
        #     },
        #     "clusterData": {
        #       "name": "${schema.spec.name}",
        #       "server": "${ekscluster.status.endpoint}",
        #       "config": {
        #         "awsAuthConfig": {
        #           "clusterName": "${schema.spec.name}",
        #           "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
        #         },
        #         "tlsClientConfig": {
        #           "insecure": false,
        #           "caData": "${ekscluster.status.certificateAuthority.data}"
        #         }
        #       }
        #     }
        #   }  


  - id: accessEntry
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: AccessEntry
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-access-entry
      spec:
        clusterName: ${schema.spec.name}
        accessPolicies:
        - accessScope:
            type: "cluster"
          policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
        principalARN: "${argocdRole.status.ackResourceMetadata.arn}"
  - id: accessEntryAdmin
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: AccessEntry
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-access-entry-admin
      spec:
        clusterName: ${schema.spec.name}
        accessPolicies:
        - accessScope:
            type: "cluster"
          policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
        principalARN: "arn:aws:iam::${schema.spec.accountId}:role/${schema.spec.adminRoleName}"       
  - id: oidcProvider
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: OpenIDConnectProvider
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-oidc
      spec:
        url: ${ekscluster.status.identity.oidc.issuer}
        clientIDs:
          - sts.amazonaws.com
        thumbprints:
          - '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'

  - id: externalSecretsRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-external-secrets-role
      spec:
        name: ${schema.spec.name}-external-secrets-role
        policies:
          - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "pods.eks.amazonaws.com"
                },
                "Action": [
                  "sts:AssumeRole",
                  "sts:TagSession"
                ]
              }
            ]
          }


